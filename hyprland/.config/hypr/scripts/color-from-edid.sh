#!/bin/bash
# Color management script for Hyprland
# Extracts color profile information from EDID and applies basic color settings
# Inspired by KDE Plasma's color management approach

# Function to get the monitor's EDID color primaries if available
get_edid_info() {
    local monitor="$1"
    # Get monitor EDID data using edid-decode if installed
    if command -v edid-decode &>/dev/null; then
        # This requires installing edid-decode on your system
        echo "Getting EDID data for $monitor..."
        edid_data=$(edid-decode /sys/class/drm/*${monitor}*/edid 2>/dev/null)
        if [ $? -eq 0 ]; then
            echo "$edid_data" | grep -E "Display|Red|Green|Blue|White"

            # Extract color primaries for future use
            red_x=$(echo "$edid_data" | grep "Red" | awk '{print $3}' | tr -d ',')
            red_y=$(echo "$edid_data" | grep "Red" | awk '{print $4}')
            green_x=$(echo "$edid_data" | grep "Green" | awk '{print $3}' | tr -d ',')
            green_y=$(echo "$edid_data" | grep "Green" | awk '{print $4}')
            blue_x=$(echo "$edid_data" | grep "Blue" | awk '{print $3}' | tr -d ',')
            blue_y=$(echo "$edid_data" | grep "Blue" | awk '{print $4}')
            white_x=$(echo "$edid_data" | grep "White" | awk '{print $3}' | tr -d ',')
            white_y=$(echo "$edid_data" | grep "White" | awk '{print $4}')

            # Save to a config file
            save_color_config "$monitor" "$red_x" "$red_y" "$green_x" "$green_y" "$blue_x" "$blue_y" "$white_x" "$white_y"
        else
            echo "Could not access EDID data for $monitor"
        fi
    else
        echo "edid-decode not found. Please install it to extract color information."
        return 1
    fi
}

# Save the color configuration to a file
save_color_config() {
    local monitor="$1"
    local red_x="$2"
    local red_y="$3"
    local green_x="$4"
    local green_y="$5"
    local blue_x="$6"
    local blue_y="$7"
    local white_x="$8"
    local white_y="$9"

    config_dir="$HOME/.config/hypr/color_profiles"
    mkdir -p "$config_dir"

    config_file="$config_dir/${monitor}.conf"

    cat >"$config_file" <<EOL
# Color profile for $monitor extracted from EDID data
# This file was automatically generated by color-from-edid.sh

# RGB Primaries in CIE xy coordinates
red_primary_x=$red_x
red_primary_y=$red_y
green_primary_x=$green_x
green_primary_y=$green_y
blue_primary_x=$blue_x
blue_primary_y=$blue_y
white_point_x=$white_x
white_point_y=$white_y

# Creation date
created_on=$(date)
EOL

    echo "Color profile saved to $config_file"

    # Create a vkBasalt config based on the monitor profile
    create_vkbasalt_config "$monitor" "$red_x" "$red_y" "$green_x" "$green_y" "$blue_x" "$blue_y" "$white_x" "$white_y"
}

# Create a vkBasalt configuration with color correction based on monitor profile
create_vkbasalt_config() {
    local monitor="$1"
    local red_x="$2"
    local red_y="$3"
    local green_x="$4"
    local green_y="$5"
    local blue_x="$6"
    local blue_y="$7"
    local white_x="$8"
    local white_y="$9"

    vkbasalt_dir="$HOME/.config/vkBasalt"
    mkdir -p "$vkbasalt_dir"

    vkbasalt_file="$vkbasalt_dir/${monitor}.conf"

    cat >"$vkbasalt_file" <<EOL
# vkBasalt configuration for $monitor
# Generated from monitor EDID data

# Enable effects - cas for sharpening, colorCorrection for color adjustments
effects = cas:colorCorrection

# Contrast Adaptive Sharpening
cas_Sharpness = 0.4

# Color correction based on monitor primaries
colorCorrection_RedMatrix = 1.0, 0.0, 0.0
colorCorrection_GreenMatrix = 0.0, 1.0, 0.0
colorCorrection_BlueMatrix = 0.0, 0.0, 1.0

# Gamma correction and white balance settings
# Default 2.2 gamma with neutral white point
colorCorrection_Gamma = 2.2
EOL

    echo "vkBasalt profile created at $vkbasalt_file"
    echo "You can use this with: VKBASALT_CONFIG_FILE=$vkbasalt_file ./vkbasalt-launch.sh <app>"
}

# Apply known good settings for HDR
apply_good_settings() {
    local monitor="$1"

    # Based on NVIDIA forum post, using sRGB gamut with HDR can help with color issues
    # This is similar to "kscreen-doctor output.1.wcg.disable" in KDE
    echo "Applying recommended settings for $monitor..."

    # Create a Hyprland-specific setup for this monitor
    config_dir="$HOME/.config/hypr/monitors"
    mkdir -p "$config_dir"

    config_file="$config_dir/${monitor}.conf"

    cat >"$config_file" <<EOL
# Monitor config for $monitor with optimized HDR settings
# This file was automatically generated by color-from-edid.sh

# For HDR content, use the hdr-launch.sh script
# For optimal color, this uses wide color gamut but with proper primaries

monitor=$monitor, preferred, auto, 1, bitdepth, 10
env = MONITOR_$monitor=1
EOL

    echo "Monitor config saved to $config_file"
    echo "You can include this in your hyprland.conf with: source = ~/.config/hypr/monitors/${monitor}.conf"
}

# Detect connected monitors and apply settings
echo "Detecting monitors..."
if command -v hyprctl &>/dev/null; then
    monitors=$(hyprctl monitors -j | jq -r '.[].name')

    for monitor in $monitors; do
        echo -e "\n--- Monitor: $monitor ---"
        get_edid_info "$monitor"
        apply_good_settings "$monitor"
    done

    echo -e "\n=== Summary and Next Steps ==="
    echo "1. Add 'source = ~/.config/hypr/monitors/*.conf' to your hyprland.conf"
    echo "2. Make sure 'wide_color_gamut = true' is set in the experimental section"
    echo "3. For HDR content, use: ~/.config/hypr/scripts/hdr-launch.sh <app>"
    echo "4. For color correction in games, use: ~/.config/hypr/scripts/vkbasalt-launch.sh <app>"
    echo "5. To update color profiles: run this script again"
else
    echo "hyprctl not found. Make sure Hyprland is running."
    exit 1
fi
